/*
 * Laboration 3 license
 * 
 * Copyright © 2016 Johan Lipecki & Viggo Lundén
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

 /* Imports omitted in printout */

public class UserInterface {

    /**
     * @param args the command line arguments
     * @throws IOException
     * @throws FileNotFoundException
     * @throws ClassNotFoundException 
     */
    public static void main(String[] args) throws IOException, FileNotFoundException, ClassNotFoundException {
        

        Menu menu = new Menu();
        
        menu.theShowMustGoOn();
        
        
    }
    
}
 - - - - - - - - - - - - - - - - - - - - - - - - - - -
package library;

/* Imports omitted in printout */

/**
 * Menu class for a library of Book(s)
 * Provides an interface with console printouts 
 * and uses the FileHelper class to load a serialized library
 * @author Johan Lipecki <lipecki@kth.se>
 * @author Viggo Lundén <vlunden@kth.se>
 */
public class Menu {

    private CollectionOfBooks books;
    private BufferedReader inPut;
    private PrintStream outPut;
    
    public Menu() {
        this("books.ser", System.in, System.out);
    }
    /**
     * Prompts the user with a menu for navigating in the library. 
     * @param serializedLibraryFilename the file, containing books, to be read
     * @param in the InputStream to read from
     * @param out the OutputStream to write to
     */
    public Menu(String serializedLibraryFilename, InputStream in, OutputStream out) {
        inPut = new BufferedReader(new InputStreamReader(in));
        outPut = new PrintStream(out);
        books = FileHelper.read(serializedLibraryFilename);
    }
    
    /**
     * The menu loop starts running.
     * @throws java.io.IOException if reading from the InputStream failed
     */
    public void theShowMustGoOn() throws IOException{
        char select = ' ';
        String selection;
        
        while(select != 'E'){
            printMenu();
            selection = inPut.readLine();
            if(!selection.isEmpty()) select = selection.toUpperCase().charAt(0);
            
            switch(select) {
                case 'A':   addBook(); break;
                case 'R':   removeBook(); break;
                case 'S':   search(); break;
                case 'L':   showLibrary(); break;
                case 'E':   for(int i = 0; i < 30; i++) outPut.println("");
                            outPut.println("End of line");
                            break;
                            
                default:    outPut.println("Sorry, I must have misread. Please select again!");
            }
            
        }
    }
    /**
     * Prints the main menu.
     */
    private void printMenu(){
        String [] menu = {
                "\n------Menu------",
                "A: Add Book",
                "R: Remove Book",
                "S: Search",
                "L: Show Library",
                "E: End Of Line"};
        for(String s: menu) outPut.println(s);
    }
    /**
     * Prompts the user with the interface for the search functionality.
     */
    private void search() throws IOException {
        ArrayList<Book> listOfBooks;
        
        Search find = new Search(books, inPut, outPut);
        listOfBooks = find.search(books); 
        if(listOfBooks != null) outPut.print(booksToTable(listOfBooks));
        
    }
    /**
     * Prompts the user with the interface to add a new book to the library. The new collection is then written to the file.
     */
    private void addBook() throws IOException {
        String isbn, title;
        int edition;
        double price;
        List<Author> authors = new ArrayList<>();
        
        outPut.println("ISBN:");
        isbn = inPut.readLine();
        
        outPut.println("Title:");
        title = inPut.readLine();
        
        outPut.println("Edition:");
        String s_edition = inPut.readLine();
        if (s_edition.trim().equals("")) edition = 0;
        else edition = Integer.parseInt(s_edition);
        
        outPut.println("Price:");
        String s_price = inPut.readLine();
        if (s_price.trim().equals("")) price = 0;
        else price = Double.parseDouble(s_price);
        
        int authorCount = 0;
        while (true)
        {
            authorCount++;
            outPut.println("(d for done) Author " + authorCount + ":");
            String name = inPut.readLine();
            if (name.equals("d")) break;
            authors.add(new Author(name));
        }
        Book book = new Book(isbn, title, edition, price);
        for (Author a : authors)
            book.addAuthor(a);
        books.addBook(book);
        
        FileHelper.write(books, "books.ser");
    }

    /**
     * Prompts the user with the interface that allows him or her to remove a book from the library. The new library is then written to the file.
     */
    private void removeBook() throws IOException {
        outPut.println("\nPlease enter ISBN of book to remove: ");
        String isbn = inPut.readLine();
        ArrayList<Book> buks = books.getBooksByISBN(isbn);
        if(buks != null)
            for(Book b: buks) 
                books.removeBook(b);
        FileHelper.write(books, "books.ser");
    }
    /**
     * Shows the library to the user.
     */
    private void showLibrary() {
            outPut.print("--\t--Library--\t--\n");
            for(Book.BookValues v: BookValues.values()){
                outPut.print(v + "\t\t");
                if(v != v.ISBN) outPut.print("\t");
            }
            for(Book b: books.getBooks()){
                outPut.println("");
                int i = 0;
                for(String s: b.toString().split(";")){
                    outPut.print(s);
                    if(s.length() < 8) outPut.print("\t\t");
                    else if(s.length() < 15) outPut.print("\t");
                    if(i != 0) outPut.print("\t");
                    i++;
                }
            }
            
            
    }
    
    /**
     * Creates table with value headers and values from Book
     * @param book
     * @return Printable Table in string format
     */
    private String bookStringToTable(String book){
        ArrayList<String> bookParts= new ArrayList();
        bookParts.addAll(Arrays.asList(book.split(";", 10)));
        
        StringBuilder string = new StringBuilder(Book.BookValues.ISBN + ": " + bookParts.get(0) + "\n");
        for(int i = 1; i < bookParts.size(); i++){
            if(i>4) string.append(", ").append(bookParts.get(i)).append("\n");
            else {
                string.append(Book.BookValues.values()[i]).append(": ");
                string.append(bookParts.get(i)).append("\n");
            }
        }
        return string.toString();
    }
    
    /**
     * Creates a list of books in table format
     * @param books
     * @return printable table in String format
     */
    private String booksToTable(ArrayList<Book> books){
        StringBuilder book = new StringBuilder();
        for(Book b: books) {
            book.append("---------------\n");
            book.append(bookStringToTable(b.toString()));
        }
        return book.toString();
    }
}

-  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

package library;

import java.util.ArrayList;
import java.io.*;
/**
 *
 * @author Johan Lipecki <lipecki@kth.se>, 
 * @author Viggo Lundén <vlunden@kth.se>
 */
public class Search {
    
    BufferedReader inPut;
    PrintStream outPut;
    CollectionOfBooks books;
    ArrayList<Book> result;
    
    public Search(CollectionOfBooks books, BufferedReader in, PrintStream out){
        this.books = books;
        inPut = in;
        outPut = out;
    }
    
    private enum SearchValues{
        ISBN,Author,Title;
    }
    
    /**
     * Prompts user for search category after printing search menu
     * @return uppercase char value of user selection
     * @throws IOException 
     */
    private char promptUser() throws IOException {
        printSearchMenu();
        String selection;
        selection = inPut.readLine();        
        if(selection.isEmpty()) selection = String.valueOf(promptUser());
        return selection.toUpperCase().charAt(0);
    }
    
    private void printSearchMenu(){
        String [] menu = {
                "-- --Search Menu-- --",
                "T: Title search",
                "I: ISBN search",
                "A: Author search",
                "N: Nevermind, Please take me back!"};
        for(String s: menu) outPut.println("\t" + s);
    }
    
    /**
     * Prompts user with a search menu, 
     * collects the selection and gets query from user
     * @param books
     * @return  ArrayList of search results
     * @throws IOException 
     */
    public ArrayList<Book> search(CollectionOfBooks books) throws IOException {
        //ArrayList<Book> result;
        char select = ' ';
        
        if(select != 'N'){
            select = promptUser();
            result = getQuery(select);    
        }
        return result;
    }
    
    /**
     * searches for user query in library
     * @param select char value for Title, ISBN, Author or Nothing
     * @return  Book ArrayList with matching results
     * @throws IOException 
     */
    private ArrayList<Book> getQuery(char select) throws IOException{
        //ArrayList<Book> result;
        while(result == null){
            switch(select) {
                case 'T':   result = getResults(SearchValues.Title); break;
                case 'I':   result = getResults(SearchValues.ISBN); break; 
                case 'A':   result = getResults(SearchValues.Author); break;
                case 'N':   result = new ArrayList<>(); break;
                default:    outPut.println("Sorry, I must have misread. Please select again!");
                            String selection = inPut.readLine();
                            select = selection.toUpperCase().charAt(0);
                            
            }
        }
        return result;
    }
    
    /**
     * prompts for query of specified searchType
     * @param searchType Title, ISBN or Author 
     * @return Book search results' ArrayList
     * @throws IOException 
     */
    private ArrayList<Book> getResults(SearchValues searchType) throws IOException{
        //ArrayList<Book> result;
        outPut.println("Please type query: ");
        String search = inPut.readLine();
        switch(searchType){
            
            case ISBN  : result = books.getBooksByISBN(search); break;
            case Author: result = books.getBooksByAuthor(search); break;
            case Title : result = books.getBooksByTitle(search); break;
            default:    result = null;    
        }
        return result;
    } 
}

- - - - - - - - - - - - - - - - - - - - - - - - - -
/* Imports omitted */

/**
 * A toolkit for creating, deleting, reading and writing CollectionOfBooks objects to a file. Prints exception messages to System.out
 * @author Viggo Lundén <vlunden@kth.se>
 */
public class FileHelper {
    /**
     * Creates a new file
     * @param filename the path and name of the file
     */
    public static void newFile(String filename)
    {
            
        try {
            File file = new File(filename);
            file.delete();
            file.createNewFile();
        } catch (IOException iOException) {
            System.out.println("Failed to create new file.");
            System.out.print(iOException.getMessage());
            System.out.println("");
        }
        
        
    }
    
    /**
     * Deletes a file
     * @param filename The path and name of the file to delete
     */
    public static void deleteFile(String filename)
    {
        File file = new File(filename);
        file.delete();
    }
    
    /**
     * Writes a CollectionOfBooks object to a file
     * @param coll CollectionOfBooks to be written
     * @param filename The path and name of the file
     */
    public static void write(CollectionOfBooks coll, String filename)
    {
        try {
            File file = new File(filename);
            FileOutputStream out = new FileOutputStream(file);
            ObjectOutputStream obout = new ObjectOutputStream(out);
            obout.writeObject(coll);
        }
        catch (FileNotFoundException fnfex)
        {
            System.out.println("Could not find the file containing books!");
            System.out.print(fnfex.getMessage());
            System.out.println("");
        }
        catch (IOException ioex)
        {
            System.out.println("Could not write to the file, "
                    + "please make sure that it's not "
                    + "already in use by another process.");
            System.out.print(ioex.getMessage());
            System.out.println("");
        }
    }
    /**
     * Reads a CollectionOfBooks from a file
     * @param filename the path and name of the file to read
     * @return the CollectionOfBooks. Null if the file is empty.
     */
    public static CollectionOfBooks read(String filename)
    {
       CollectionOfBooks coll = new CollectionOfBooks();
       try {
            ObjectInputStream in = new ObjectInputStream(new FileInputStream(filename));
            coll = (CollectionOfBooks) in.readObject();
       }
       catch (FileNotFoundException fnfex)
       {
            System.out.println("Could not find the file containing books!");
            System.out.print(fnfex.getMessage());
            System.out.println("");
       }
       catch (IOException ioex)
       {
            System.out.println("Could not read from the file, "
                    + "please make sure that it's not "
                    + "already in use by another process.");
            System.out.print(ioex.getMessage());
            System.out.println("");
       }
       catch (ClassNotFoundException cnfex)
       {
           System.out.println("Failed to deserialize object");
           System.out.print(cnfex.getMessage());
           System.out.println("");
       }
       finally {
           return coll;
       }
    }
}
- - - - - - - - - - - - - - - - - - - - - - - - - - -
/* Imports omitted in printout */

/**
 * Represents a collection of books (Book)
 * @author Johan Lipecki <lipecki@kth.se>, 
 * @author Viggo Lundén <vlunden@kth.se>
 */
public class CollectionOfBooks implements Serializable {
    private ArrayList<Book> books;
    /**
     * Creates an empty collection of books
     */
    public CollectionOfBooks(){
        books = new ArrayList<>();
    }
    
    /**
     * Adds a book to the collection of books
     * @param book 
     */
    
    public void addBook(Book book)
    {
        books.add(book);
    }
    
    /**
     * Adds an array of books to the collection of books
     * @param books 
     */
    public void addBooks(Book ...books){
        for (Book b : books)
        {
            this.books.add(b);
        }
    }

    /**
     * Removes a book reference from the collection of books.
     * @param book
     * @return True if the book was found and removed, false if it wasn't found
     */
    public boolean removeBook(Book book)
    {
        if (books.contains(book))
        {
            books.remove(book);
            return true;
        }
        return false;
    }
    /**
     * Returns a <b>clone</b> of the collection of books
     * @return 
     */
    public ArrayList<Book> getBooks()
    {
        return (ArrayList<Book>) books.clone();
    }
    
    /**
     * Returns all books with a title that contains the specified input string. NB! It does <b>not</b> return clones.
     * @param title The specified title
     * @return ArrayList<Book>
     */
    public ArrayList<Book> getBooksByTitle(String title)
    {
        ArrayList<Book> books_by_title = new ArrayList<>();
        for (Book b : books)
        {
            if (b.getTitle().trim().toLowerCase().contains(title.trim().toLowerCase())) books_by_title.add(b);
        }
        Collections.sort(books_by_title);
        return books_by_title;
    }
    
    /**
     * Returns all books with the specified ISBN sorted by title. NB! It does <b>not</b> return clones.
     * @param isbn The specified isbn
     * @return ArrayList<Book>
     */
    public ArrayList<Book> getBooksByISBN(String isbn)
    {
        ArrayList<Book> books_by_isbn = new ArrayList<>();
        for (Book b : books)
        {
            if (b.getISBN().contains(isbn)) books_by_isbn.add(b);
        }
        Collections.sort(books_by_isbn);
        return books_by_isbn;
    }
    
    /**
     * Returns all books with the specified Author sorted by title. NB! It does <b>not</b> return clones.
     * @param author
     * @return ArrayList<Book>
     */
    public ArrayList<Book> getBooksByAuthor (String author) 
    {
        ArrayList<Book> books_by_author;
        ArrayList<Author> authors;
        ArrayList<String> authorNames;
        
        books_by_author = new ArrayList<>();
        authorNames = new ArrayList();
        
        for (Book b : books)
        {
            authors = b.getAuthors();
            for(Author a: authors){
                //Add entire name to list
                authorNames.add(a.toString());
                for(String name: a.getName().trim().split(" ")){
                    //remove csv-chars accidentally left
                    name = name.replace(",","").replace(";","");
                    if(name.equalsIgnoreCase(author) || name.toLowerCase().contains(author.toLowerCase())) books_by_author.add(b);
                }
            }
            if (authors.contains(new Author(author)) || authorNames.contains(author)) 
                if(!books_by_author.contains(b)) books_by_author.add(b);
            authorNames.clear();
        }
        Collections.sort(books_by_author);
        return books_by_author;
    }
}

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/* Imports omitted in printout */
package library;

import java.io.Serializable;
import java.util.ArrayList;

/**
* Represents a book with values isbn, title, edition price and Author
 * @author Johan Lipecki <lipecki@kth.se> 
 * @author Viggo Lundén <vlunden@kth.se>
 */
public class Book implements Comparable<Book>, Serializable{

    private final String isbn;
    private final String title;
    private final int edition;
    private final double price;
    private ArrayList<String> book;
    private ArrayList<Author> authors;
    
    /**
     * A book object is instanciated
     * @param isbn
     * @param title
     * @param edition
     * @param price 
     */
    public Book(String isbn, String title, int edition, double price)
    {
        init(isbn, title, edition, price);        
        this.isbn = isbn;
        this.title = title;
        this.edition = edition;
        this.price = price;
        authors = new ArrayList<>();
    }
    /**
     * Initializes ArrayList<Author> authors, for authors 
     * and ArrayList<String> book, for book values, which is then filled 
     * with the given parameters
     * @param isbn
     * @param title
     * @param edition
     * @param price 
     */
    private void init(String isbn, String title, int edition, double price){
        init();
        book.add(0,isbn);
        book.add(1,title);
        book.add(2, Integer.toString(edition));
        book.add(3, Double.toString(price));
    }
    
    /**
     * Placeholder book,
     * can be compared and thus also sorted.
     */
    public Book(){
        this(null,null,Integer.MAX_VALUE,Double.NaN);
        init();
    }
    
    /**
     * Initializes class lists for Book values and authors
     */
    private void init(){
        book = new ArrayList<>();
        authors = new ArrayList<>();
    }
    
    public String getISBN()
    {
        return this.isbn;
    }
    
    public String getTitle()
    {
        return this.title;
    }
    
    public int getEdition()
    {
        return this.edition;
    }
    
    public double getPrice()
    {
        return this.price;
    }
    
    /**
     * Adds author to Book list of authors
     * @param author 
     */
    public void addAuthor(Author author)
    {
       authors.add(author);
       this.book.add(author.getName()); 
       
    }
    /**
     * 
     * @return a cloned ArrayList of Author(s)
     */
    public ArrayList<Author> getAuthors()
    {
        return (ArrayList<Author>) authors.clone();
    }
    
    /**
     * 
     * @return a semi-colon separated list of Book values, 
     * including authors, in the enum BookValues{} order: 
     * ISBN, Title, Edition, Price and Author(s)
     */
    @Override
    public String toString(){
        StringBuilder book = new StringBuilder(this.book.get(0));
        for(int i = 1; i < this.book.size(); i++){
            if(i < 5) book.append(";").append(this.book.get(i));
            else {
                book.append(", ").append(this.book.get(i));
            }
        }
        return book.toString();
    }
    
    /**
     * Compares book Titles
     * @param o
     * @return 0 if books are equal, 
     * otherwise a negative or positive comparative value
     * @throws NullPointerException 
     */
    public int compareTo(Book o) throws NullPointerException {
        if (this == o) return 0;
        try{
            if(o.title != null) return this.title.compareTo(((Book) o).getTitle());
            else return this.edition - o.getEdition();
        }
        finally {}
    }
    
    public enum BookValues{
        ISBN, Title, Edition, Price, Author;
    }
    
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/* Imports omitted in printout */


/**
 * Represents an author, with first and last name
 * @author Viggo Lundén <vlunden@kth.se>, Johan Lipecki <lipecki@kth.se>
 */
public class Author implements Serializable {
    private final String lastname;
    private final String firstname;
    private ArrayList<String> names;
    private final String name;
    
    /**
     * Creates a new author
     * @param name The first and last name of the author, separated with whitespace(s)
     */
    public Author(String name)
    {
        this.name = name;
        
        names = new ArrayList<>();
        names.addAll(Arrays.asList(name.split(" ", 5)));
        
        if(name.contains(" ")) {
            firstname = names.get(0);
            lastname = names.get(names.size() - 1);
        }
        else { firstname = name; lastname = null;}
        
    }
    /**
     * 
     * @return Author's full name
     */
    public String getName(){
        return this.name;
    }
    /**
     * 
     * @return Author's last name
     */
    public String lastname(){
        if(lastname.isEmpty()) return null;
        return this.lastname;
    }
    /**
     * 
     * @return Author's first name
     */
    public String firstname(){
        if(firstname.isEmpty()) return null;
        return this.firstname;
    }
    /**
     * 
     * @return Author's full name
     */
    @Override
    public String toString(){
        return name;
    }
}

